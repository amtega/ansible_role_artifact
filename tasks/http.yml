---
- name: Download http/https artifacts
  vars:
    artifact_http_dest: >-
      {{ artifact_item.dest
         + (artifact_item.dest_file | default("") | length > 0)
           | ternary("/" + artifact_item.dest_file | default(""),
                     "/" + artifact_item.file) }}

    artifact_http_url: >-
      {{ artifact_item.host }}{{ artifact_item.path
                                 | default('/') }}/{{ artifact_item.file }}
  tags:
    - role::artifact
    - role::artifact::http
  block:
    - name: Check http/https artifact download
      ansible.builtin.stat:
        path: "{{ artifact_http_check_path }}"
      register: artifact_http_check_result
      no_log: "{{ artifact_item.no_log | default(true) }}"
      loop: "{{ _artifact_type_state_present }}"
      loop_control:
        loop_var: artifact_item
        label: "{{ artifact_item.id }}"
      vars:
        artifact_http_check_path: >-
          {{ (artifact_item_unarchive_creates)
             | ternary(artifact_item_unarchive_creates_dest,
                       artifact_http_dest) }}

    - name: Download artifacts from http/https server
      ansible.builtin.get_url:
        attributes: "{{ artifact_item.attributes | default(omit) }}"
        backup: "{{ artifact_item.backup | default(omit) }}"
        client_cert: "{{ artifact_item.client_cert | default(omit) }}"
        client_key: "{{ artifact_item.client_key | default(omit) }}"
        dest: "{{ artifact_http_dest }}"
        force: >-
          {{ artifact_item.force | default(false)
             or artifact_item.version
                | default("")
                | string
                != artifact_previous_version }}
        force_basic_auth: "{{ artifact_item.force_basic_auth | default(omit) }}"
        group: "{{ artifact_item.group | default(omit) }}"
        headers: "{{ artifact_item.headers | default(omit) }}"
        http_agent: "{{ artifact_item.http_agent | default(omit) }}"
        mode: "{{ artifact_item.mode | default(omit) }}"
        owner: "{{ artifact_item.owner | default(omit) }}"
        selevel: "{{ artifact_item.selevel | default(omit) }}"
        serole: "{{ artifact_item.serole | default(omit) }}"
        setype: "{{ artifact_item.setype | default(omit) }}"
        seuser: "{{ artifact_item.seuser | default(omit) }}"
        timeout: "{{ artifact_item.timeout | default(omit) }}"
        tmp_dest: "{{ artifact_item.tmp_dest | default(artifact_item.dest) }}"
        unsafe_writes: "{{ artifact_item.unsafe_writes | default(omit) }}"
        url: "{{ artifact_http_url }}"
        url_password: "{{ artifact_item.password | default(omit) }}"
        url_username: "{{ artifact_item.username | default(omit) }}"
        use_proxy: "{{ artifact_item.use_proxy | default(omit) }}"
        validate_certs: "{{ artifact_item.validate_certs | default(omit) }}"
      register: artifact_http_result
      retries: "{{ artifact_item.retries | default(artifact_retries) }}"
      delay: "{{ artifact_item.delay | default(artifact_delay) }}"
      until: artifact_http_result is succeeded
      when: >-
        (not artifact_download_exists
         and artifact_item.check_download | default(true) | bool)
        or (artifact_item.download | default(true) | bool
            and (artifact_item.force | default(false) | bool
                 or artifact_previous_version is none
                 or (artifact_item.version is defined
                     and artifact_item.version | string
                     != artifact_previous_version)))

      no_log: "{{ artifact_item.no_log | default(true) }}"
      loop: "{{ _artifact_type_state_present }}"
      loop_control:
        loop_var: artifact_item
        index_var: artifact_item_index
        label: "{{ artifact_item.id }} - {{ artifact_http_url }}"
      ignore_errors: true
      environment: "{{ proxy_client_environment }}"
      vars:
        artifact_previous_version: >-
          {{ (ansible_local["artifact_" + artifact_item.id]
              | default({}))["version"]
              | default(__artifact_undefined_place_holder) }}
        artifact_http_check_results: >-
          {{ artifact_http_check_result.results }}
        artifact_download_exists: >-
          {{ artifact_http_check_results[artifact_item_index].stat.exists }}

    - name: Check http/https artifacts
      ansible.builtin.assert:
        that: >-
          artifact_http_result.results[artifact_item_index]
          is success
        quiet: true
        fail_msg: >-
          {{ artifact_http_result.results[artifact_item_index].msg
             | default("") }}
        success_msg: Artifact downloaded successful
      loop: >-
        {{ _artifact_type_state_present
           | map("artifact_hide_sensitive_info")
           | list }}
      loop_control:
        loop_var: artifact_item
        index_var: artifact_item_index
        label: "{{ artifact_item.id }} - {{ artifact_http_url }}"
