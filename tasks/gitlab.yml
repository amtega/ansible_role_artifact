---
# GitLab/GitHub artifact download tasks

- block:
    - name: Check gitlab/github artifact download
      stat:
        path: "{{ artifact_item.dest }}/{{ artifact_item.file }}"
      register: artifact_gitlab_check_result
      no_log: "{{ artifact_item.no_log | default(true) }}"
      loop: >-
        {{ artifact_to_manage_present
           | selectattr('type', 'in', ['gitlab', 'github'])
           | list }}
      loop_control:
        loop_var: artifact_item
        label: "{{ artifact_item.id }}"

    - block:
        - name: Create temporary directory for gitlab/github project clone
          tempfile:
            path: "{{ artifact_item.tmp_dest | default(artifact_item.dest) }}"
            state: directory
          register: artifact_gitlab_tmp_result
          no_log: "{{ artifact_item.no_log | default(true) }}"
          loop: >-
            {{ artifact_to_manage_present
               | selectattr('type', 'in', ['gitlab', 'github'])
               | list }}
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"

        - block:
            - name: Clone gitlab/github project into temporay directory
              expect:
                command: >-
                  git
                  {{ git_http_proxy_opt }}
                  {{ git_https_proxy_opt }}
                  clone -n
                  {{ artifact_item.host }}/{{ artifact_item.project }}.git
                  {{ artifact_gitlab_tmp }}
                  -b {{ artifact_item.branch }}
                  --depth 1
                responses:
                  (?i)username: "{{ artifact_item.username | default('') }}"
                  (?i)password: >-
                    {{ artifact_item.password | default('') | string }}
                timeout: "{{ artifact_item.timeout | default(omit) }}"
              args:
                chdir: "{{ artifact_item.dest }}"
              register: artifact_gitlab_clone_result
              failed_when: artifact_gitlab_clone_result.rc | default(0) != 0
              no_log: "{{ artifact_item.no_log | default(true) }}"
              loop: >-
                {{ artifact_to_manage_present
                   | selectattr('type', 'in', ['gitlab', 'github'])
                   | list }}
              loop_control:
                loop_var: artifact_item
                index_var: artifact_item_index
                label: "{{ artifact_item.id }}"
              until: artifact_gitlab_clone_result is succeeded
              retries: "{{ artifact_item.retries | default(artifact_retries) }}"
              delay: "{{ artifact_item.delay | default(artifact_delay) }}"

            - name: Reset gitlab/github project clone to head
              shell: >-
                  git reset HEAD .
              args:
                chdir: "{{ artifact_gitlab_tmp }}"
              register: artifact_gitlab_reset_result
              failed_when: artifact_gitlab_reset_result.rc != 0
              no_log: "{{ artifact_item.no_log | default(true) }}"
              loop: >-
                {{ artifact_to_manage_present
                   | selectattr('type', 'in', ['gitlab', 'github'])
                   | list }}
              loop_control:
                loop_var: artifact_item
                index_var: artifact_item_index
                label: "{{ artifact_item.id }}"

            - name: Checkout artifact from gitlab/github project
              expect:
                command: >-
                  git
                  {{ git_http_proxy_opt }}
                  {{ git_https_proxy_opt }}
                  checkout
                  -- {{ artifact_gitlab_file_path }}
                responses:
                  (?i)username: "{{ artifact_item.username | default('') }}"
                  (?i)password: >-
                    {{ artifact_item.password | default('') | string }}
                timeout: "{{ artifact_item.timeout | default(omit) }}"
              args:
                chdir: "{{ artifact_gitlab_tmp }}"
              register: artifact_gitlab_checkout_result
              failed_when: artifact_gitlab_checkout_result.rc != 0
              no_log: "{{ artifact_item.no_log | default(true) }}"
              loop: >-
                {{ artifact_to_manage_present
                   | selectattr('type', 'in', ['gitlab', 'github'])
                   | list }}
              loop_control:
                loop_var: artifact_item
                index_var: artifact_item_index
                label: "{{ artifact_item.id }}"
              until: artifact_gitlab_checkout_result is succeeded
              retries: "{{ artifact_item.retries | default(artifact_retries) }}"
              delay: "{{ artifact_item.delay | default(artifact_delay) }}"

          environment:
            GIT_SSL_NO_VERIFY: "{{ (not artifact_item.validate_certs) | int }}"
          vars:
            git_http_proxy_opt: >-
              {{ (proxy_client_environment.http_proxy
                  | default('')
                  | length > 0)
                 | ternary('-c "http.proxy='
                           + proxy_client_environment.http_proxy | default('')
                           + '"',
                           '' ) }}
            git_https_proxy_opt: >-
              {{ (proxy_client_environment.https_proxy
                  | default('')
                  | length > 0)
                 | ternary('-c "https.proxy='
                           + proxy_client_environment.https_proxy | default('')                           | default('')
                           + '"',
                           '' ) }}

        - name: Move artifact to destination
          shell: >-
              mv {{ artifact_gitlab_file_path }}
              {{ artifact_item.dest
                 + (artifact_item.dest_file | default("") | length > 0)
                   | ternary("/" + artifact_item.dest_file | default(""), "") }}
          args:
            chdir: "{{ artifact_gitlab_tmp }}"
          register: artifact_gitlab_move_result
          failed_when: artifact_gitlab_move_result.rc != 0
          no_log: "{{ artifact_item.no_log | default(true) }}"
          loop: >-
            {{ artifact_to_manage_present
               | selectattr('type', 'in', ['gitlab', 'github'])
               | list }}
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"

        - name: Cleanup temporary directory with gitlab/github project clone
          file:
            path: "{{ artifact_gitlab_tmp }}"
            state: absent
          register: artifact_gitlab_cleanup_result
          no_log: "{{ artifact_item.no_log | default(true) }}"
          loop: >-
            {{ artifact_to_manage_present
               | selectattr('type', 'in', ['gitlab', 'github'])
               | list }}
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"
      when: >-
        not artifact_download_exists
        or artifact_item.force | default(false)
        or artifact_item.version | default("") != artifact_previous_version
      vars:
        artifact_gitlab_check_results: >-
          {{ artifact_gitlab_check_result.results }}
        artifact_download_exists: >-
          {{ artifact_gitlab_check_results[artifact_item_index].stat.exists }}
        artifact_gitlab_tmp: >-
          {{ artifact_gitlab_tmp_result.results[artifact_item_index].path }}
        artifact_gitlab_file_path: >-
          {{ (artifact_item.path is defined
               and artifact_item.path | length > 0)
             | ternary(artifact_item.path
                       | default("")
                       | regex_replace("^/(.*)", "\1")
                       + "/"
                       + artifact_item.file,
                       artifact_item.file) }}
        artifact_previous_version: >-
          ((ansible_local.artifact
           | default({}))[artifact_item.id]
           | default({}))[version]
           | default("")

    - name: Setup artifact attributes
      file:
        path: >-
          {{ artifact_item.dest
             + (artifact_item.dest_file | default("") | length > 0)
               | ternary("/" + artifact_item.dest_file | default(""),
                         "/" + artifact_item.file) }}
        attributes: "{{ artifact_item.attributes | default(omit) }}"
        group: "{{ artifact_item.group | default(omit) }}"
        mode: "{{ artifact_item.mode | default(omit) }}"
        owner: "{{ artifact_item.owner | default(omit) }}"
        selevel: "{{ artifact_item.selevel | default(omit) }}"
        serole: "{{ artifact_item.serole | default(omit) }}"
        setype: "{{ artifact_item.setype | default(omit) }}"
        seuser: "{{ artifact_item.seuser | default(omit) }}"
      register: artifact_gitlab_attributes_result
      no_log: "{{ artifact_item.no_log | default(true) }}"
      loop: >-
        {{ artifact_to_manage_present
           | selectattr('type', 'in', ['gitlab', 'github'])
           | list }}
      loop_control:
        loop_var: artifact_item
        label: "{{ artifact_item.id }}"
  when: artifact_item.download | default(true)
  environment: "{{ proxy_client_environment }}"
  tags:
    - role::artifact
    - role::artifact::gitlab
