---
- name: Download gitlab/github artifacts
  when: artifact_item.download | default(true) | bool
  environment: "{{ proxy_client_environment }}"
  vars:
    artifact_gitlab_dest: >-
      {{ artifact_item.dest
         + (artifact_item.dest_file | default("") | length > 0)
           | ternary("/" + artifact_item.dest_file | default(""),
                     "/" + artifact_item.file) }}
  tags:
    - role::artifact
    - role::artifact::gitlab
  block:
    - name: Check gitlab/github artifact download
      ansible.builtin.stat:
        path: "{{ artifact_gitlab_check_path }}"
      register: artifact_gitlab_check_result
      no_log: "{{ artifact_item.no_log | default(true) }}"
      loop: "{{ _artifact_type_state_present }}"
      loop_control:
        loop_var: artifact_item
        label: "{{ artifact_item.id }}"
      vars:
        artifact_gitlab_check_path: >-
          {{ (artifact_item_unarchive_creates)
             | ternary(artifact_item_unarchive_creates_dest,
                       artifact_gitlab_dest) }}

    - name: Perform gitlab/github artifact download
      when: >-
        (not artifact_download_exists
         and artifact_item.check_download | default(true) | bool)
        or (artifact_item.download | default(true) | bool
            and (artifact_item.force | default(false) | bool
                 or artifact_previous_version is none
                 or (artifact_item.version is defined
                     and artifact_item.version | string
                     != artifact_previous_version)))
      vars:
        artifact_gitlab_check_results: >-
          {{ artifact_gitlab_check_result.results }}
        artifact_download_exists: >-
          {{ artifact_gitlab_check_results[artifact_item_index].stat.exists }}
        artifact_gitlab_tmp: >-
          {{ artifact_gitlab_tmp_result.results[artifact_item_index].path }}
        artifact_gitlab_file_path: >-
          {{ (artifact_item.path is defined
               and artifact_item.path | length > 0)
             | ternary(artifact_item.path
                       | default("")
                       | regex_replace("^/(.*)", "\1")
                       + "/"
                       + artifact_item.file,
                       artifact_item.file) }}
        artifact_previous_version: >-
          {{ (ansible_local["artifact_" + artifact_item.id]
              | default({}))["version"]
              | default(__artifact_undefined_place_holder) }}
      block:
        - name: Create temporary directory for gitlab/github project clone
          ansible.builtin.tempfile:
            path: "{{ artifact_item.tmp_dest | default(artifact_item.dest) }}"
            state: directory
          register: artifact_gitlab_tmp_result
          no_log: "{{ artifact_item.no_log | default(true) }}"
          loop: "{{ _artifact_type_state_present }}"
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"

        - name: Retrieve artifact form gitlab/github project
          environment:
            GIT_SSL_NO_VERIFY: "{{ (not artifact_item.validate_certs) | int }}"
          vars:
            git_http_proxy_opt: >-
              {{ (proxy_client_environment.http_proxy
                  | default('')
                  | length > 0)
                 | ternary('-c "http.proxy='
                           + proxy_client_environment.http_proxy | default('')
                           + '"',
                           '') }}
            git_https_proxy_opt: >-
              {{ (proxy_client_environment.https_proxy
                  | default('')
                  | length > 0)
                 | ternary('-c "https.proxy='
                           + proxy_client_environment.https_proxy | default('')
                           + '"',
                           '') }}
            artifact_git_clone_repository: >-
              {{ artifact_item.host }}/{{ artifact_item.project }}.git
          block:
            - name: Clone gitlab/github project into temporay directory
              ansible.builtin.expect:
                command:
                  cmd: >-
                    git
                    {{ git_http_proxy_opt }}
                    {{ git_https_proxy_opt }}
                    clone -n
                    {{ artifact_git_clone_repository }}
                    {{ artifact_gitlab_tmp }}
                    -b {{ artifact_item.branch }}
                    --depth 1
                chdir: "{{ artifact_item.dest }}"
                responses:
                  (?i)username: "{{ artifact_item.username | default('') }}"
                  (?i)password: >-
                    {{ artifact_item.password | default('') | string }}
                timeout: "{{ artifact_item.timeout | default(omit) }}"
              register: artifact_gitlab_clone_result
              failed_when: artifact_gitlab_clone_result.rc | default(0) != 0
              no_log: "{{ artifact_item.no_log | default(true) }}"
              loop: "{{ _artifact_type_state_present }}"
              loop_control:
                loop_var: artifact_item
                index_var: artifact_item_index
                label: >-
                  {{ artifact_item.id }} - {{ artifact_git_clone_repository }}
              until: artifact_gitlab_clone_result is succeeded
              retries: "{{ artifact_item.retries | default(artifact_retries) }}"
              delay: "{{ artifact_item.delay | default(artifact_delay) }}"
              ignore_errors: true

            - name: Check gitlab/github clone
              ansible.builtin.assert:
                that: >-
                  artifact_gitlab_clone_result.results[artifact_item_index]
                  is success
                quiet: true
                fail_msg: >-
                  {{ artifact_gitlab_clone_result.results
                     [artifact_item_index].msg
                     | default("") }}
                success_msg: Artifact cloned successful
              loop: >-
                {{ _artifact_type_state_present
                   | map("artifact_hide_sensitive_info")
                   | list }}
              loop_control:
                loop_var: artifact_item
                index_var: artifact_item_index
                label: >-
                  {{ artifact_item.id }} - {{ artifact_git_clone_repository }}

            - name: Reset gitlab/github project clone to head
              # noqa command-instead-of-module
              ansible.builtin.command:
                cmd: /usr/bin/git reset HEAD .
                chdir: "{{ artifact_gitlab_tmp }}"
              register: artifact_gitlab_reset_result
              failed_when: artifact_gitlab_reset_result.rc != 0
              changed_when: true
              no_log: "{{ artifact_item.no_log | default(true) }}"
              loop: "{{ _artifact_type_state_present }}"
              loop_control:
                loop_var: artifact_item
                index_var: artifact_item_index
                label: "{{ artifact_item.id }}"
              ignore_errors: true

            - name: Check gitlab/github clone reset to head
              ansible.builtin.assert:
                that: >-
                  artifact_gitlab_reset_result.results[artifact_item_index]
                  is success
                quiet: true
                fail_msg: >-
                  {{ artifact_gitlab_reset_result.results
                     [artifact_item_index].msg
                     | default("") }}
                success_msg: Artifact clone reset to head was successful
              loop: >-
                {{ _artifact_type_state_present
                   | map("artifact_hide_sensitive_info")
                   | list }}
              loop_control:
                loop_var: artifact_item
                index_var: artifact_item_index
                label: "{{ artifact_item.id }}"

            - name: Checkout artifact from gitlab/github project
              ansible.builtin.expect:
                command:
                  cmd: >-
                    git
                    {{ git_http_proxy_opt }}
                    {{ git_https_proxy_opt }}
                    checkout
                    -- {{ artifact_gitlab_file_path }}
                chdir: "{{ artifact_gitlab_tmp }}"
                responses:
                  (?i)username: "{{ artifact_item.username | default('') }}"
                  (?i)password: >-
                    {{ artifact_item.password | default('') | string }}
                timeout: "{{ artifact_item.timeout | default(omit) }}"
              register: artifact_gitlab_checkout_result
              failed_when: artifact_gitlab_checkout_result.rc != 0
              no_log: "{{ artifact_item.no_log | default(true) }}"
              loop: "{{ _artifact_type_state_present }}"
              loop_control:
                loop_var: artifact_item
                index_var: artifact_item_index
                label: "{{ artifact_item.id }}"
              until: artifact_gitlab_checkout_result is succeeded
              retries: "{{ artifact_item.retries | default(artifact_retries) }}"
              delay: "{{ artifact_item.delay | default(artifact_delay) }}"

            - name: Check gitlab/github checkout
              ansible.builtin.assert:
                that: >-
                  artifact_gitlab_checkout_result.results[artifact_item_index]
                  is success
                quiet: true
                fail_msg: >-
                  {{ artifact_gitlab_checkout_result.results
                     [artifact_item_index].msg
                     | default("") }}
                success_msg: Artifact checkout was successful
              loop: >-
                {{ _artifact_type_state_present
                   | map("artifact_hide_sensitive_info")
                   | list }}
              loop_control:
                loop_var: artifact_item
                index_var: artifact_item_index
                label: "{{ artifact_item.id }}"

        - name: Move artifact to destination
          ansible.builtin.command:
            cmd: >-
              mv {{ artifact_gitlab_file_path }} {{ artifact_gitlab_dest }}
            chdir: "{{ artifact_gitlab_tmp }}"
          register: artifact_gitlab_move_result
          failed_when: artifact_gitlab_move_result.rc != 0
          changed_when: true
          no_log: "{{ artifact_item.no_log | default(true) }}"
          loop: "{{ _artifact_type_state_present }}"
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"

        - name: Setup artifact attributes
          ansible.builtin.file:
            path: "{{ artifact_gitlab_dest }}"
            attributes: "{{ artifact_item.attributes | default(omit) }}"
            group: "{{ artifact_item.group | default(omit) }}"
            mode: "{{ artifact_item.mode | default(omit) }}"
            owner: "{{ artifact_item.owner | default(omit) }}"
            selevel: "{{ artifact_item.selevel | default(omit) }}"
            serole: "{{ artifact_item.serole | default(omit) }}"
            setype: "{{ artifact_item.setype | default(omit) }}"
            seuser: "{{ artifact_item.seuser | default(omit) }}"
          register: artifact_gitlab_attributes_result
          no_log: "{{ artifact_item.no_log | default(true) }}"
          loop: "{{ _artifact_type_state_present }}"
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"

        - name: Cleanup temporary directory with gitlab/github project clone
          ansible.builtin.file:
            path: "{{ artifact_gitlab_tmp }}"
            state: absent
          register: artifact_gitlab_cleanup_result
          no_log: "{{ artifact_item.no_log | default(true) }}"
          loop: "{{ _artifact_type_state_present }}"
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"
