---
# GitLab/GitHub artifact download tasks

- block:
    - name: check gitlab/github artifact download
      stat:
        path: "{{ artifact_item.dest }}/{{ artifact_item.file }}"
      register: artifact_gitlab_check_result
      loop: >-
        {{ artifact_list
           | selectattr('type', 'in', ['gitlab', 'github'])
           | list }}
      loop_control:
        loop_var: artifact_item
        label: "{{ artifact_item.id }}"

    - block:
        - name: create temporary directory for gitlab/github project clone
          tempfile:
            path: "{{ artifact_item.tmp_dest | default(artifact_item.dest) }}"
            state: directory
          register: artifact_gitlab_tmp_result
          loop: >-
            {{ artifact_list
               | selectattr('type', 'in', ['gitlab', 'github'])
               | list }}
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"

        - name: clone gitlab/github project into temporay directory
          expect:
            command: >-
              git clone -n
              {{ artifact_item.host }}/{{ artifact_item.project }}.git
              {{ artifact_gitlab_tmp }}
              -b {{ artifact_item.branch }}
              --depth 1
            responses:
              (?i)username: "{{ artifact_item.username | default('') }}"
              (?i)password: >-
                {{ artifact_item.password | default('') | string }}
          args:
            chdir: "{{ artifact_item.dest }}"
          register: artifact_gitlab_clone_result
          failed_when: artifact_gitlab_clone_result.rc | default(0) != 0
          loop: >-
            {{ artifact_list
               | selectattr('type', 'in', ['gitlab', 'github'])
               | list }}
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"
          until: artifact_gitlab_clone_result is succeeded
          retries: "{{ artifact_item.retries | default(artifact_retries) }}"
          delay: "{{ artifact_item.delay | default(artifact_delay) }}"

        - name: reset gitlab/github project clone to head
          shell: >-
              git reset HEAD .
          args:
            chdir: "{{ artifact_gitlab_tmp }}"
          register: artifact_gitlab_reset_result
          failed_when: artifact_gitlab_reset_result.rc != 0
          loop: >-
            {{ artifact_list
               | selectattr('type', 'in', ['gitlab', 'github'])
               | list }}
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"

        - name: checkout artifact from gitlab/github project
          expect:
            command: "git checkout -- {{ artifact_gitlab_file_path }}"
            responses:
              (?i)username: "{{ artifact_item.username | default('') }}"
              (?i)password: >-
                {{ artifact_item.password | default('') | string }}
          args:
            chdir: "{{ artifact_gitlab_tmp }}"
          register: artifact_gitlab_checkout_result
          failed_when: artifact_gitlab_checkout_result.rc != 0
          loop: >-
            {{ artifact_list
               | selectattr('type', 'in', ['gitlab', 'github'])
               | list }}
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"
          until: artifact_gitlab_checkout_result is succeeded
          retries: "{{ artifact_item.retries | default(artifact_retries) }}"
          delay: "{{ artifact_item.delay | default(artifact_delay) }}"

        - name: move artifact to destination
          shell: >-
              mv {{ artifact_gitlab_file_path }} {{ artifact_item.dest }}
          args:
            chdir: "{{ artifact_gitlab_tmp }}"
          register: artifact_gitlab_move_result
          failed_when: artifact_gitlab_move_result.rc != 0
          loop: >-
            {{ artifact_list
               | selectattr('type', 'in', ['gitlab', 'github'])
               | list }}
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"

        - name: cleanup temporary directory with gitlab/github project clone
          file:
            path: "{{ artifact_gitlab_tmp }}"
            state: absent
          register: artifact_gitlab_cleanup_result
          loop: >-
            {{ artifact_list
               | selectattr('type', 'in', ['gitlab', 'github'])
               | list }}
          loop_control:
            loop_var: artifact_item
            index_var: artifact_item_index
            label: "{{ artifact_item.id }}"
      when: not artifact_download_exists or artifact_item.force | default(false)
      environment:
        GIT_SSL_NO_VERIFY: "{{ (not artifact_item.validate_certs) | int }}"
      vars:
        artifact_gitlab_check_results: >-
          {{ artifact_gitlab_check_result.results }}
        artifact_download_exists: >-
          {{ artifact_gitlab_check_results[artifact_item_index].stat.exists }}
        artifact_gitlab_tmp: >-
          {{ artifact_gitlab_tmp_result.results[artifact_item_index].path }}
        artifact_gitlab_file_path: >-
          {{ (artifact_item.path is defined
               and artifact_item.path | length > 0)
             | ternary(artifact_item.path
                       | default("")
                       | regex_replace("^/(.*)", "\1")
                       + "/"
                       + artifact_item.file,
                       artifact_item.file) }}

    - name: setup download attributes
      file:
        path: "{{ artifact_item.dest | default('') }}/{{ artifact_item.file }}"
        attributes: "{{ artifact_item.attributes | default(omit) }}"
        group: "{{ artifact_item.group | default(omit) }}"
        mode: "{{ artifact_item.mode | default(omit) }}"
        owner: "{{ artifact_item.owner | default(omit) }}"
        selevel: "{{ artifact_item.selevel | default(omit) }}"
        serole: "{{ artifact_item.serole | default(omit) }}"
        setype: "{{ artifact_item.setype | default(omit) }}"
        seuser: "{{ artifact_item.seuser | default(omit) }}"
      register: artifact_gitlab_attributes_result
      loop: >-
        {{ artifact_list
           | selectattr('type', 'in', ['gitlab', 'github'])
           | list }}
      loop_control:
        loop_var: artifact_item
        label: "{{ artifact_item.id }}"

  when: artifact_item.download | default(true)
  environment: "{{ proxy_client_environment }}"
  tags:
    - role::artifact
    - role::artifact::gitlab
